plot(rESS[[i]], type = "l",
main = names(rESS[i]), xlab = "", ylab = "",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
}
}
par(mfrow = c(2, 3))
for (i in 1:6){
if (i %in% c(1,4,7)){
plot(rESS[[i]], type = "l",
main = names(rESS[i]), xlab = "", ylab = "rESS",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
} else if (i %in% c(11,12)){
plot(rESS[[i]], type = "l",
main = names(rESS[i]), xlab = "ASMC iteration", ylab = "",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
} else if (i==10){
plot(rESS[[i]], type = "l",
main = names(rESS[i]), xlab = "ASMC iteration", ylab = "rESS",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
} else{
plot(rESS[[i]], type = "l",
main = names(rESS[i]), xlab = "", ylab = "",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
}
}
par(mfrow = c(2, 3))
for (i in 1:6){
if (i %in% c(1,4,7)){
plot(accept_rate[[i]], type = "l",
main = names(accept_rate[i]), xlab = "", ylab = "rESS",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
} else if (i %in% c(11,12)){
plot(accept_rate[[i]], type = "l",
main = names(accept_rate[i]), xlab = "ASMC iteration", ylab = "",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
} else if (i==10){
plot(accept_rate[[i]], type = "l",
main = names(accept_rate[i]), xlab = "ASMC iteration", ylab = "rESS",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
} else{
plot(accept_rate[[i]], type = "l",
main = names(accept_rate[i]), xlab = "", ylab = "",
cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
}
}
library(tidyverse)
library(textcat)
data.org <- read.csv(file = "/Users/Nunu/Downloads/5-4_data.csv")
data <- data.org %>%
dplyr::filter(Abstract != "null" & Abstract != "\"%\"")
data <- data %>%
dplyr::filter(textcat(Abstract) == "english")
load(file = "/Users/Nunu/Downloads/5-4_data.RData")
## general settings
p <- 10
n <- nrow(dis)
cmds.result <- cmdscale(d = dis, k = p,
eig = TRUE, add = FALSE, x.ret = FALSE)
class(cmds.result) <- append(class(cmds.result), "CMDS")
## set hyperparameters
sim.a.initial <- 5
SSR.initial <- SSRFun(d.mat = dis, delta.mat = as.matrix(dist(cmds.result$points)))
sim.m <- n * (n - 1)/2
sim.b.initial <- SSR.initial/sim.m
## source ASMC models
# helper functions
source(file = "R/ASMC_helper_fun.R")
# ASMC function
source(file = "R/ASMC_fun_Rcpp.R")
source(file = "R/ASMC_incr_fun_Rcpp.R")
# truncated skewed Normal
source(file = "R/ASMC_truncatedSkewedN.R")
source(file = "R/ASMC_truncatedSkewedN_incr.R")
# truncated T
source(file = "R/ASMC_truncatedT.R")
source(file = "R/ASMC_truncatedT_incr.R")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_SN_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/likelihoodFun_SN_rcpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/proposalFun_SN_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_SN_incr_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/likelihoodFun_SN_incr_rcpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/proposalFun_SN_incr_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_T_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/likelihoodFun_T_rcpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/proposalFun_T_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_T_incr_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/likelihoodFun_T_incr_rcpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/proposalFun_T_incr_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/bisectionFun_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/dmvnrm_arma_fast_rcpp.cpp")
## set hyperparameters
sim.a.initial <- 5
SSR.initial <- SSRFun(d.mat = dis, delta.mat = as.matrix(dist(cmds.result$points)))
sim.m <- n * (n - 1)/2
sim.b.initial <- SSR.initial/sim.m
sim.alpha.initial <- 1/2
sample.cov <- cov(cmds.result$points)
sim.beta.initial <- (1/2)*diag(sample.cov)
df.initial <- 5
c.initial <- -2
d.initial <- 2
constant.multiple <- 2.38^2/5
reference.x.sd <- diag(rep(1, p))
hyperparList <- list(a = sim.a.initial, b = sim.b.initial,
alpha = sim.alpha.initial, beta = sim.beta.initial,
df = df.initial,
c = c.initial, d = d.initial, constant_multiple = constant.multiple,
reference_x_sd = reference.x.sd)
tuningparList <- list(K = 200, phi = 0.8, eps = 0.5)
n.core <- detectCores()-1
## run GBMDS-ASMC
#model <- truncatedN(hyperparList, p, reference.x.sd)
#model <- truncatedT(hyperparList, p, reference.x.sd)
model <- truncatedSkewedN(hyperparList, p, reference.x.sd)
dim(dis)
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "cosine", upper_bound = 1,
n.update = 2, n.update.x = 130)
#metric = dist.metric[dist.metric.index])
end.time <- Sys.time()
end.time - start.time
save.image(file = "/Users/Nunu/Desktop/5-4_cosine_p10_SN.RData")
## run GBMDS-ASMC
#model <- truncatedN(hyperparList, p, reference.x.sd)
model <- truncatedT(hyperparList, p, reference.x.sd)
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "cosine", upper_bound = 1,
n.update = 2, n.update.x = 130)
## run GBMDS-ASMC
#model <- truncatedN(hyperparList, p, reference.x.sd)
#model <- truncatedT(hyperparList, p, reference.x.sd)
model <- truncatedSkewedN(hyperparList, p, reference.x.sd)
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "cosine", upper_bound = 1,
n.update = 2, n.update.x = 50)
#metric = dist.metric[dist.metric.index])
end.time <- Sys.time()
end.time - start.time
save.image(file = "/Users/Nunu/Desktop/5-4_cosine_p10_SN_50.RData")
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "cosine", upper_bound = 1,
n.update = 2, n.update.x = 25)
#metric = dist.metric[dist.metric.index])
end.time <- Sys.time()
end.time - start.time
save.image(file = "/Users/Nunu/Desktop/5-4_cosine_p10_SN_25.RData")
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "cosine", upper_bound = 1,
n.update = 2, n.update.x = 260)
library(mvtnorm)
set.seed(123)
X <- rmvnorm(n=5, mean = rep(0, 3), sigma = diag(3))
X
class(tolower(data.eng$text_combined))
length(tolower(data.eng$text_combined))
jaccardDist <- function(input){
distmatrix <- stringdistmatrix(tolower(input),
useNames = FALSE, method = "jaccard")
dis <- as.matrix(distmatrix)
return(dis)
}
jaccardDist(data.eng$text_combined)
library(stringdist)
jaccardDist <- function(input){
distmatrix <- stringdist::stringdistmatrix(tolower(input),
useNames = FALSE, method = "jaccard")
dis <- as.matrix(distmatrix)
return(dis)
}
jaccardDist(data.eng$text_combined)
erin = jaccardDist(data.eng$text_combined)
hist(erin)
View(jaccardDist)
Rcpp::sourceCpp("test.cpp")
Rcpp::sourceCpp("test.cpp")
Rcpp::sourceCpp("test.cpp")
jaccardDist(data.eng$text_combined)
Rcpp::sourceCpp("test.cpp")
getwd()
model = model
dist.mat = dis
cmds.result = cmds.result$points
metric = "jaccard"
upper_bound = 1
n.update = 2
n.update.x = 50
# register the number of cores to use for parallel execution
registerDoMC(n.core)
n <- nrow(dist.mat)
K <- tuningparList$K
hyperparList <- model$hyperparList
### setting
x.mean <- list(rep(0, p))
x.mean.list <- rep(x.mean, n)
### initialization
# initialize SMC iteration index
r <- 1
# initialize annealing parameter
tau <- numeric()
tau[1] <- 0
tauDiff <- numeric()
tauDiff[1] <- 0
# initialize marginal log likelihood estimate
logZ <- 0
# initialize the relative effective sample size
rESS <- numeric()
rESS[1] <- 0
# initialize the acceptance rate
accept_rate <- numeric()
accept_rate[1] <- 0
accept_rate_x <- numeric()
accept_rate_x[1] <- 0
# initialize particles with independent samples
theta <- list()
xi <- list()
sigma2 <- numeric()
sigma2.list <- list()
lambda <- list()
psi <- numeric()
if (any(class(model) %in% c("truncatedT"))){
g <- list()
}
initialK <- function(k){
#res <- initialFun(model, cmds.result, dist.mat, metric)
if (any(class(model) %in% c("truncatedN"))){
res <- initialFun_cpp(cmds.result, dist.mat, metric, hyperparList)
} else if (any(class(model) %in% c("truncatedT"))){
res <- initialFun_T_cpp(cmds.result, dist.mat, metric, hyperparList)
} else if (any(class(model) %in% c("truncatedSkewedN"))){
res <- initialFun_SN_cpp(cmds.result, dist.mat, metric, hyperparList)
}
return(res)
}
if (n.core > 1){
theta <- foreach(i = 1:K, .combine = 'c') %dopar% {
temp <- initialK(i)
list(temp)
}
xi <- lapply(1:K, function(k){theta[[k]]$x})
sigma2 <- unlist(lapply(1:K, function(k){theta[[k]]$sigma2}))
psi <- unlist(lapply(1:K, function(k){theta[[k]]$psi}))
lambda <- lapply(1:K, function(k){theta[[k]]$lambda})
if (any(class(model) %in% c("truncatedT"))){
g <- lapply(1:K, function(k){theta[[k]]$g})
}
} else{
if (any(class(model) %in% c("truncatedN"))){
theta <- lapply(1:K, function(i){initialFun_cpp(cmds.result, dist.mat, metric, hyperparList)})
} else if (any(class(model) %in% c("truncatedT"))){
theta <- lapply(1:K, function(i){initialFun_T_cpp(cmds.result, dist.mat, metric, hyperparList)})
} else if (any(class(model) %in% c("truncatedSkewedN"))){
theta <- lapply(1:K, function(i){initialFun_SN_cpp(cmds.result, dist.mat, metric, hyperparList)})
}
#theta <- lapply(1:K, function(i){initialFun_cpp(cmds.result, dist.mat, metric, hyperparList)})
xi <- lapply(1:K, function(k){theta[[k]]$x})
sigma2 <- unlist(lapply(1:K, function(k){theta[[k]]$sigma2}))
psi <- unlist(lapply(1:K, function(k){theta[[k]]$psi}))
lambda <- lapply(1:K, function(k){theta[[k]]$lambda})
if (any(class(model) %in% c("truncatedT"))){
g <- lapply(1:K, function(k){theta[[k]]$g})
}
}
sigma2.list[[r]] <- sigma2
reference.mean <- rep(list(cmds.result), K)
# set initialize weights to unity
W <- rep(1/K, K)
logW <- log(W)
w <- rep(1, K)
logw <- log(w)
cat("iteration:",r,"\n")
r <- r+1
# evaluate the log-likelihood
logL <- rep(NA, K)
SSR <- rep(NA, K)
class(model)
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "euclidean", upper_bound = 1,
n.update = 2, n.update.x = 50)
end.time - start.time
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "cosine", upper_bound = 1,
n.update = 2, n.update.x = 50)
#metric = dist.metric[dist.metric.index])
end.time <- Sys.time()
end.time - start.time
## general settings
p <- 10
n <- nrow(dis)
cmds.result <- cmdscale(d = dis, k = p,
eig = TRUE, add = FALSE, x.ret = FALSE)
class(cmds.result) <- append(class(cmds.result), "CMDS")
## set hyperparameters
sim.a.initial <- 5
SSR.initial <- SSRFun(d.mat = dis, delta.mat = as.matrix(dist(cmds.result$points)))
sim.m <- n * (n - 1)/2
sim.b.initial <- SSR.initial/sim.m
sim.alpha.initial <- 1/2
sample.cov <- cov(cmds.result$points)
sim.beta.initial <- (1/2)*diag(sample.cov)
df.initial <- 5
c.initial <- -2
d.initial <- 2
constant.multiple <- 2.38^2/5
reference.x.sd <- diag(rep(1, p))
hyperparList <- list(a = sim.a.initial, b = sim.b.initial,
alpha = sim.alpha.initial, beta = sim.beta.initial,
df = df.initial,
c = c.initial, d = d.initial, constant_multiple = constant.multiple,
reference_x_sd = reference.x.sd)
tuningparList <- list(K = 200, phi = 0.8, eps = 0.5)
n.core <- detectCores()-1
## run GBMDS-ASMC
#model <- truncatedN(hyperparList, p, reference.x.sd)
#model <- truncatedT(hyperparList, p, reference.x.sd)
model <- truncatedSkewedN(hyperparList, p, reference.x.sd)
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "cosine", upper_bound = 1,
n.update = 2, n.update.x = 50)
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "euclidean", upper_bound = 1,
n.update = 2, n.update.x = 50)
#metric = dist.metric[dist.metric.index])
end.time <- Sys.time()
end.time - start.time
save.image(file = "/Users/Nunu/Desktop/5-4_cosine_p10_SN_50_eud.RData")
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "euclidean", upper_bound = 1e20,
n.update = 2, n.update.x = 50)
#metric = dist.metric[dist.metric.index])
end.time <- Sys.time()
end.time - start.time
save.image(file = "/Users/Nunu/Desktop/5-4_cosine_p10_SN_50_eud2.RData")
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "euclidean", upper_bound = 1e20,
n.update = 2, n.update.x = 1)
#metric = dist.metric[dist.metric.index])
end.time <- Sys.time()
end.time - start.time
Rcpp::sourceCpp("~/Desktop/helper_Rcpp/copy/distRcpp.cpp")
Rcpp::sourceCpp("~/Desktop/helper_Rcpp/copy/distRcpp.cpp")
Rcpp::sourceCpp("~/Desktop/helper_Rcpp/copy/distRcpp.cpp")
Rcpp::sourceCpp("~/Desktop/helper_Rcpp/copy/distRcpp.cpp")
Rcpp::sourceCpp("~/Desktop/helper_Rcpp/copy/distRcpp.cpp")
Rcpp::sourceCpp("helper_Rcpp/distRcpp.cpp")
Rcpp::sourceCpp("helper_Rcpp/distRcpp.cpp")
Rcpp::sourceCpp("helper_Rcpp/distRcpp.cpp")
Rcpp::sourceCpp("helper_Rcpp/distRcpp.cpp")
intersect(c(1,2,3), c(2,1,3))
intersect(c(1,2,3), c(2,1,4))
intersect(c(1,2,3), c(2,1,5))
intersect(c(1,2,3), c(4,5,6))
load(file = "/Users/Nunu/Downloads/5-4_data_139.RData")
p
# pdf(file = "/Users/erin/Desktop/PhD-Yr1/Visualization/figures/figure_pdf/ex4_gravity_dis.pdf",   # The directory you want to save the file in
#     width = 6, # The width of the plot in inches
#     height = 4)
#
ggplot(dis.df, aes(x = dis)) +
geom_histogram(bins = 80) +
labs(x = "Gravity dissimilarity") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
theme_bw()
# pdf(file = "/Users/erin/Desktop/PhD-Yr1/Visualization/figures/figure_pdf/ex4_gravity_dis.pdf",   # The directory you want to save the file in
#     width = 6, # The width of the plot in inches
#     height = 4)
#
ggplot(dis.jaccard.df, aes(x = dis)) +
geom_histogram(bins = 80) +
labs(x = "Gravity dissimilarity") +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
theme_bw()
## set hyperparameters
sim.a.initial <- 5
SSR.initial <- SSRFun(d.mat = dis, delta.mat = as.matrix(dist(cmds.result$points)))
## source ASMC models
# helper functions
source(file = "R/ASMC_helper_fun.R")
# ASMC function
source(file = "R/ASMC_fun_Rcpp.R")
source(file = "R/ASMC_incr_fun_Rcpp.R")
# truncated skewed Normal
source(file = "R/ASMC_truncatedSkewedN.R")
source(file = "R/ASMC_truncatedSkewedN_incr.R")
# truncated T
source(file = "R/ASMC_truncatedT.R")
source(file = "R/ASMC_truncatedT_incr.R")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_SN_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/proposalFun_SN_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_T_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_T_incr_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/bisectionFun_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/dmvnrm_arma_fast_rcpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_SN_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/likelihoodFun_SN_rcpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/proposalFun_SN_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_SN_incr_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/likelihoodFun_SN_incr_rcpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/proposalFun_SN_incr_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_T_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/likelihoodFun_T_rcpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/proposalFun_T_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/initialFun_T_incr_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/likelihoodFun_T_incr_rcpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/proposalFun_T_incr_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/bisectionFun_cpp.cpp")
Rcpp::sourceCpp(file = "helper_Rcpp/dmvnrm_arma_fast_rcpp.cpp")
## define dissimilarity metric
dist.metric <-"euclidean"
## general settings
p <- 5
n <- nrow(dis)
cmds.result <- cmdscale(d = dis, k = p,
eig = TRUE, add = FALSE, x.ret = FALSE)
class(cmds.result) <- append(class(cmds.result), "CMDS")
## set hyperparameters
sim.a.initial <- 5
SSR.initial <- SSRFun(d.mat = dis, delta.mat = as.matrix(dist(cmds.result$points)))
sim.m <- n * (n - 1)/2
sim.b.initial <- SSR.initial/sim.m
sim.alpha.initial <- 1/2
sample.cov <- cov(cmds.result$points)
sim.beta.initial <- (1/2)*diag(sample.cov)
df.initial <- 5
c.initial <- -2
d.initial <- 2
constant.multiple <- 2.38^2/5
reference.x.sd <- diag(rep(1, p))
hyperparList <- list(a = sim.a.initial, b = sim.b.initial,
alpha = sim.alpha.initial, beta = sim.beta.initial,
df = df.initial,
c = c.initial, d = d.initial, constant_multiple = constant.multiple,
reference_x_sd = reference.x.sd)
tuningparList <- list(K = 200, phi = 0.8, eps = 0.5)
n.core <- detectCores()-1
## run GBMDS-ASMC
#model <- truncatedN(hyperparList, p, reference.x.sd)
#model <- truncatedT(hyperparList, p, reference.x.sd)
model <- truncatedSkewedN(hyperparList, p, reference.x.sd)
start.time <- Sys.time()
asmc.result <- ASMC_Rcpp(model = model, dist.mat = dis,
tuningparList, n.core, cmds.result = cmds.result$points,
metric = "euclidean", upper_bound = 1,
n.update = 2, n.update.x = 1)
#metric = dist.metric[dist.metric.index])
end.time <- Sys.time()
end.time - start.time
index.asmc <- which.min(asmc.result$SSR.output)
ASMC.res <- asmc.result$xi.output[[index.asmc]]
## compute STRESS values
cmds.stress <- stressFun(d.mat = dis,
delta.mat = philentropy::distance(cmds.result$points, method = "cosine"))
asmc.stress <- stressFun(d.mat = dis,
delta.mat = philentropy::distance(ASMC.res, method = "cosine"))
cat("STRESS value for CMDS is", round(cmds.stress, 4)) # 1.2686 (p2) 1.0542 (p10)
cat("STRESS value for BMDS with ASMC is", round(asmc.stress, 4)) # 1.231 (p2) 1.0508 (p10)
ASMC.cluster.res <- pam(x = ASMC.res, k=4,
#stand = TRUE,
#metric = "manhattan",
keep.data = FALSE)
library(cluster)
ASMC.cluster.res <- pam(x = ASMC.res, k=4,
#stand = TRUE,
#metric = "manhattan",
keep.data = FALSE)
ASMC.cluster.res$clusinfo
ASMC.cluster.res$silinfo$avg.width
#ASMC.cluster.res <- kmeans(ASMC.res, centers = 2)
ASMC.clustering <- ASMC.cluster.res$clustering
library(GGally)
ASMC.res.df <- as.data.frame(ASMC.res)
ASMC.clustering.cat <- as.factor(ASMC.clustering)
# pdf(file = "/Users/erin/Desktop/PhD-Yr1/Visualization/figures/figure_pdf/ex4_cosine_10_cluster.pdf",   # The directory you want to save the file in
#     width = 6, # The width of the plot in inches
#     height = 4)
ggpairs(ASMC.res.df, aes(colour = ASMC.clustering.cat, alpha = 0.4),
axisLabels = "none",
columnLabels = paste0("x", seq(1, 10)),
upper = list(continuous = wrap("density", alpha = 0.5), combo = "box_no_facet")) +
#upper = "blank")
theme_bw()
library(GGally)
library(ggplot2)
detach("package:tidyverse", unload = TRUE)
library(GGally)
library(ggplot2)
detach("package:ggrepel", unload = TRUE)
library(GGally)
library(Hmisc)
detach("package:Hmisc", unload = TRUE)
save.image(file = "temp.RData")
